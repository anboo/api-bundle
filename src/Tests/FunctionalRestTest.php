<?php


namespace Anboo\ApiBundle\Tests;

use App\Controller\V1\QuestionController;
use GuzzleHttp\Client;
use Liip\TestFixturesBundle\Test\FixturesTrait;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class FunctionalRestTest extends KernelTestCase
{
    use FixturesTrait;

    /** @var Client */
    private $guzzle;

    /** @var array */
    protected $guzzleOptions = [];

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->guzzle = new Client();
    }

    /**
     * @param $class
     * @return object
     */
    public function getController($class)
    {
        return (self::bootKernel())->getContainer()->get($class);
    }

    /**
     * @param Response $response
     * @return array
     */
    public function getResponse(Response $response)
    {
        if (!$res = json_decode($response->getContent(), true)) {
            $this->fail('Expected json, got '.$response->getContent());
        }

        return $res;
    }

    /**
     * @param array $response
     */
    public function assertValidResponse(array $response)
    {
        $this->assertIsArray($response);
        $this->assertEmpty($response['errors']);
        $this->assertNotEmpty($response['response']);
    }

    /**
     * @return array
     */
    public function request($uri, $method = 'GET', $parameters = [], $content = null, $cookies = [], $files = [], $server = []) : array
    {
        $response = self::bootKernel()->handle(
            Request::create($uri, $method, $parameters, $cookies, $files, $server, $content)
        );

        return json_decode($response->getContent(), true);
    }

    /**
     * @param $service
     * @return object
     */
    public function getService($service)
    {
        return self::bootKernel()->getContainer()->get($service);
    }
}